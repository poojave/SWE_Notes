Ref - Distributed Locks | System design basics https://www.youtube.com/watch?v=v7x75aN9liM
Properties of distributed locks
    1. Fault tolerant - Distributed lock manager
    2. Deadlock free - TTL
    3. Mutually exclusive - Unique locking number

Uber usecase of consistency? Ref: https://www.youtube.com/watch?v=MDuagr729aU
    1. Trip accepted by Driver -> 2. Trip cancelled by Rider
    Ideally there should be lock after request1 and request2 should go into exception state
    Solutions?
        1. Distributed locks
            1.1 Useful for non state owning services that need trx
            1.2 Uses apache helix, zookeeper for cluster management
            1.3 Can be run in two modes. Strict (Better consistency) and non-strict (has to sacrifice consistency)
            1.4 As a persistent layer Redis, cockroach db, cassandra can be used
            1.5 Used cassandra here as persistent layer which has following limitations
                1.5.1 The operations are slow and does not scale well horizontally
                1.5.2 when using in memory locks, the state is lost with state change

        2. Ring pop
            2.1 Scalable, fault tolerant application layer sharding
            2.2 Uses consistent hashing concept
            2.3 Uses open source protocol GOSSIP
            2.4 Tradeoffs
                2.4.1 Request can take as many hop in order to transfer the request to the right owning worker of related trip
                2.4.2 If this is handling by single threaded applications, the load would be much or can make the server down too